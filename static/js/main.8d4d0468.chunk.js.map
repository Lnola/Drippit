{"version":3,"sources":["components/styled/Flex.js","components/styled/Drop.js","screens/Game/Tube.js","constants/colors.js","utils/TubesSetup.js","screens/Game/index.js","utils/DidPlayerWin.js","App.js","serviceWorker.js","index.js"],"names":["getAlignValue","value","flex","css","direction","justifyContent","justifySelf","alignItems","alignSelf","wrap","margin","position","width","height","Flex","styled","div","main","a","article","section","Drop","span","color","isDropClicked","index","indexInNewArray","Container","Tube","props","handleDropClick","tubeIndex","state","this","drops","onClick","map","drop","key","className","length","Component","colors","tubesSetup","numberOfTubes","randomColors","shuffle","slice","sameColorTubes","tubes","i","concat","Array","fill","push","splice","Game","onDropClick","indexOfPreviousClicked","indexOf","isTheSameTubeClicked","isAnyTubeClicked","isTubeFull","isClickedTubeEmpty","undefined","doTheColorsMatch","pop","counter","forEach","tube","every","e","didPlayerWin","setTimeout","setState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d4d0468.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\r\n\r\nconst getAlignValue = value => {\r\n  switch (value) {\r\n    case \"start\":\r\n      return \"flex-start\";\r\n    case \"end\":\r\n      return \"flex-end\";\r\n    case \"center\":\r\n      return \"center\";\r\n    case \"space-between\":\r\n      return \"space-between\";\r\n    case \"space-around\":\r\n      return \"space-around\";\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport const flex = css`\r\n  display: flex;\r\n  ${({ direction }) => direction && `flex-direction: ${direction};`}\r\n  ${({ justifyContent }) =>\r\n    justifyContent && `justify-content: ${getAlignValue(justifyContent)};`}\r\n  ${({ justifySelf }) =>\r\n    justifySelf && `justify-self: ${getAlignValue(justifySelf)};`}\r\n  ${({ alignItems }) =>\r\n    alignItems && `align-items: ${getAlignValue(alignItems)};`}\r\n  ${({ alignSelf }) => alignSelf && `align-self: ${getAlignValue(alignSelf)};`}\r\n  ${({ wrap }) => wrap && `flex-wrap: ${wrap};`}\r\n  ${({ margin }) => margin && `margin: ${margin};`}\r\n  ${({ position }) => position && `position: ${position};`}\r\n  ${({ width }) => width && `width: ${width};`}\r\n  ${({ height }) => height && `height: ${height};`}\r\n`;\r\n\r\nconst Flex = styled.div`\r\n  ${flex}\r\n`;\r\n\r\nexport const FlexMain = styled.main`\r\n  ${flex}\r\n`;\r\n\r\nexport const FlexAnchor = styled.a`\r\n  ${flex}\r\n`;\r\n\r\nexport const FlexArticle = styled.article`\r\n  ${flex}\r\n`;\r\n\r\nexport const FlexSection = styled.section`\r\n  ${flex}\r\n`;\r\n\r\nexport default Flex;\r\n","import styled from \"styled-components\";\r\n\r\nconst Drop = styled.span`\r\n  position: absolute;\r\n  display: inline-block;\r\n  width: 60px;\r\n  height: 60px;\r\n  border-radius: 50%;\r\n  margin: 0 5px;\r\n\r\n  ${({ color }) => color && `background-color: ${color};`}\r\n  ${({ isDropClicked, index, indexInNewArray }) =>\r\n    isDropClicked\r\n      ? `\r\n        animation-name: dropRise;\r\n        animation-duration: 0.3s;\r\n        top:-${60 * index}px;\r\n        \r\n        @keyframes dropRise {\r\n          0% {\r\n            top: 0px;\r\n          }\r\n\r\n        }`\r\n      : `\r\n        animation-name: dropBounce;\r\n        animation-duration: 0.3s;\r\n      \r\n        @keyframes dropBounce {\r\n          0% {\r\n            top: -${60 * indexInNewArray}px;\r\n          }\r\n          40% {\r\n            top: 12px;\r\n            height: 52px;\r\n          }\r\n          70% {\r\n            top: -22px;\r\n          }\r\n          100% {\r\n            top: 0px;\r\n            height: 60px;\r\n          }\r\n      }`};\r\n`;\r\n\r\nexport default Drop;\r\n","import React, { Component } from \"react\";\r\nimport Drop from \"../../components/styled/Drop\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.span`\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n  width: 74px;\r\n  height: 247px;\r\n  margin: 20px;\r\n  padding-bottom: 5px;\r\n  border: 2px solid black;\r\n  border-top: none;\r\n  border-radius: 0 0 20px 20px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nclass Tube extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  handleDropClick = () => {\r\n    this.props.handleDropClick(this.props.tubeIndex);\r\n  };\r\n\r\n  render() {\r\n    const { drops, isDropClicked, indexInNewArray } = this.props;\r\n\r\n    return (\r\n      <span>\r\n        <Container onClick={this.handleDropClick}>\r\n          {drops.map((drop, index) => (\r\n            <span key={index} className=\"drop-span\">\r\n              {index === drops.length - 1 ? (\r\n                <Drop\r\n                  color={drop}\r\n                  index={4 - index}\r\n                  isDropClicked={isDropClicked}\r\n                  indexInNewArray={5 - indexInNewArray}\r\n                />\r\n              ) : (\r\n                <Drop color={drop} index={index} />\r\n              )}\r\n            </span>\r\n          ))}\r\n        </Container>\r\n      </span>\r\n    );\r\n  }\r\n}\r\nexport default Tube;\r\n","const colors = [\"red\", \"green\", \"orange\", \"blue\"];\r\n\r\nexport default colors;\r\n","import shuffle from \"shuffle-array\";\r\nimport colors from \"../constants/colors\";\r\n\r\nexport const tubesSetup = (numberOfTubes) => {\r\n  const randomColors = shuffle(colors).slice(0, numberOfTubes);\r\n  let sameColorTubes = [];\r\n  let tubes = [];\r\n\r\n  for (let i = numberOfTubes; i > 0; i--)\r\n    sameColorTubes = sameColorTubes.concat(\r\n      new Array(4).fill(randomColors[i - 1])\r\n    );\r\n\r\n  sameColorTubes = shuffle(sameColorTubes);\r\n\r\n  for (let i = 0; i < numberOfTubes + 2; i++)\r\n    tubes.push(sameColorTubes.splice(0, 4));\r\n\r\n  return tubes;\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Flex from \"../../components/styled/Flex\";\r\nimport Tube from \"./Tube\";\r\nimport { tubesSetup } from \"../../utils/TubesSetup\";\r\nimport { didPlayerWin } from \"../../utils/DidPlayerWin\";\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tubes: [],\r\n      numberOfTubes: 4,\r\n      isDropClicked: null,\r\n      indexInNewArray: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      tubes: tubesSetup(this.state.numberOfTubes),\r\n      isDropClicked: new Array(this.state.numberOfTubes).fill(false),\r\n    });\r\n  }\r\n\r\n  onDropClick = (tubeIndex) => {\r\n    let { isDropClicked, tubes } = this.state;\r\n    let indexOfPreviousClicked = isDropClicked.indexOf(true);\r\n\r\n    //CONDITIONS\r\n\r\n    const isTheSameTubeClicked = tubeIndex === indexOfPreviousClicked;\r\n    const isAnyTubeClicked = indexOfPreviousClicked !== -1;\r\n    const isTubeFull = tubes[tubeIndex].length === 4;\r\n    const isClickedTubeEmpty =\r\n      tubes[tubeIndex][tubes[tubeIndex].length - 1] === undefined;\r\n    const doTheColorsMatch = isAnyTubeClicked\r\n      ? tubes[tubeIndex][tubes[tubeIndex].length - 1] ===\r\n        tubes[indexOfPreviousClicked][tubes[indexOfPreviousClicked].length - 1]\r\n      : false;\r\n\r\n    //CONDITIONS\r\n\r\n    if (\r\n      !isTheSameTubeClicked &&\r\n      isAnyTubeClicked &&\r\n      !isTubeFull &&\r\n      (doTheColorsMatch || isClickedTubeEmpty)\r\n    ) {\r\n      tubes[tubeIndex].push(tubes[indexOfPreviousClicked].pop());\r\n\r\n      if (didPlayerWin(tubes)) {\r\n        setTimeout(() => {\r\n          this.setState({ tubes: tubesSetup(this.state.numberOfTubes) });\r\n        }, 500);\r\n      }\r\n    } else isDropClicked[tubeIndex] = !isDropClicked[tubeIndex];\r\n\r\n    if (isAnyTubeClicked && !isTheSameTubeClicked)\r\n      isDropClicked[indexOfPreviousClicked] = !isDropClicked[\r\n        indexOfPreviousClicked\r\n      ];\r\n\r\n    this.setState({ indexInNewArray: tubes[tubeIndex].length });\r\n    this.setState({ isDropClicked });\r\n  };\r\n\r\n  render() {\r\n    const { tubes, isDropClicked, indexInNewArray } = this.state;\r\n\r\n    if (!isDropClicked) return null;\r\n\r\n    return (\r\n      <Flex>\r\n        {tubes.map((tube, index) => (\r\n          <Tube\r\n            key={index}\r\n            drops={tube}\r\n            tubeIndex={index}\r\n            isDropClicked={isDropClicked[index]}\r\n            indexInNewArray={indexInNewArray}\r\n            handleDropClick={this.onDropClick}\r\n          />\r\n        ))}\r\n      </Flex>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","export const didPlayerWin = (tubes) => {\r\n  let counter = 0;\r\n  tubes.forEach((tube) => {\r\n    if (tube.every((e) => e === tube[0]) && tube.length === 4) counter++;\r\n  });\r\n\r\n  if (counter === 4) return true;\r\n\r\n  return false;\r\n};\r\n","import React from \"react\";\nimport Game from \"./screens/Game\";\nimport \"./styles.css\";\n\nconst App = () => {\n  return (\n    <>\n      <Game />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}