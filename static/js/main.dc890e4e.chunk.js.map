{"version":3,"sources":["index.styled.js","components/styled/Drop.js","components/styled/Flex.js","components/styled/Tube.js","components/styled/Heading.js","components/common/Tube.js","components/common/Heading.js","constants/colors.js","utils/initTubes.js","utils/win.js","screens/index.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyles","createGlobalStyle","Drop","styled","span","color","isDropClicked","index","indexInNewArray","css","rise","bounce","getAlignValue","value","Flex","div","direction","justifyContent","justifySelf","alignItems","alignSelf","wrap","margin","position","width","height","Tube","upAndDown","keyframes","Heading","h1","this","props","drops","isClicked","map","drop","key","length","Component","colors","initTubes","numberOfFilledTubes","numberOfEmptyTubes","numberOfTubes","randomColors","shuffle","slice","sameColorTubes","tubes","i","concat","Array","fill","push","splice","didPlayerWin","counter","forEach","tube","every","e","Game","toggleIsTubeClicked","isTubeClicked","state","reset","setTimeout","setState","onTubeClick","tubeIndex","indexOfPreviousClicked","indexOf","clickedTube","lastDrop","previousTube","isAnyTubeClicked","isTheSameTubeClicked","isTubeFull","isClickedTubeEmpty","undefined","doTheColorsMatch","pop","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc890e4e.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  #root {\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nexport default GlobalStyles;\n","import styled, { css } from 'styled-components';\n\nconst rise = (index) => css`\n  animation-name: dropRise;\n  animation-duration: 0.3s;\n  top: -${60 * index}px;\n\n  @keyframes dropRise {\n    0% {\n      top: 0px;\n    }\n  }\n`;\n\nconst bounce = (index) => css`\n  animation-name: dropBounce;\n  animation-duration: 0.3s;\n\n  @keyframes dropBounce {\n    0% {\n      top: -${60 * index}px;\n    }\n    40% {\n      top: 12px;\n      height: 42px;\n    }\n    70% {\n      top: -5px;\n    }\n    100% {\n      top: 0px;\n      height: 60px;\n    }\n  }\n`;\n\nconst Drop = styled.span`\n  position: relative;\n  display: inline-block;\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  margin: 0 5px;\n\n  ${({ color }) => color && `background-color: ${color};`}\n  ${({ isDropClicked, index, indexInNewArray }) =>\n    isDropClicked ? rise(index) : bounce(indexInNewArray)};\n`;\n\nexport default Drop;\n","import styled from 'styled-components';\n\nconst getAlignValue = (value) => {\n  switch (value) {\n    case 'start':\n      return 'flex-start';\n    case 'end':\n      return 'flex-end';\n    case 'center':\n      return 'center';\n    case 'space-between':\n      return 'space-between';\n    case 'space-around':\n      return 'space-around';\n    default:\n      return null;\n  }\n};\n\nexport const Flex = styled.div`\n  display: flex;\n  ${({ direction }) => direction && `flex-direction: ${direction};`}\n  ${({ justifyContent }) =>\n    justifyContent && `justify-content: ${getAlignValue(justifyContent)};`}\n  ${({ justifySelf }) =>\n    justifySelf && `justify-self: ${getAlignValue(justifySelf)};`}\n  ${({ alignItems }) =>\n    alignItems && `align-items: ${getAlignValue(alignItems)};`}\n  ${({ alignSelf }) => alignSelf && `align-self: ${getAlignValue(alignSelf)};`}\n  ${({ wrap }) => wrap && `flex-wrap: ${wrap};`}\n  ${({ margin }) => margin && `margin: ${margin};`}\n  ${({ position }) => position && `position: ${position};`}\n  ${({ width }) => width && `width: ${width};`}\n  ${({ height }) => height && `height: ${height};`}\n`;\n\nexport default Flex;\n","import styled from 'styled-components';\n\nconst Tube = styled.span`\n  display: flex;\n  flex-direction: column-reverse;\n  width: 74px;\n  height: 247px;\n  margin: 20px;\n  padding-bottom: 5px;\n  border: 2px solid #040404;\n  border-top: none;\n  border-radius: 0 0 30px 30px;\n  box-sizing: border-box;\n`;\n\nexport default Tube;\n","import styled, { keyframes } from 'styled-components';\n\nconst upAndDown = keyframes`\n  0% {\n    top: 45px;\n  }\n  8.33% {\n    top: 50px;\n  }\n  58.33% {\n    top: 20px;\n  }\n  100% {\n    top: 45px;\n  }\n`;\n\nconst Heading = styled.h1`\n  position: relative;\n  margin: 0;\n  padding: 0;\n  font-family: 'Source Sans Pro', sans-serif;\n  font-size: 200px;\n  margin-bottom: 60px;\n  text-align: center;\n\n  &::before {\n    z-index: 1;\n    content: '';\n    position: absolute;\n    width: 40px;\n    height: 40px;\n    background-color: orange;\n    border-radius: 50%;\n    top: 45px;\n    left: 249px;\n    animation: ${upAndDown} 3.5s infinite;\n  }\n\n  &::after {\n    z-index: 1;\n    content: '';\n    position: absolute;\n    width: 40px;\n    height: 40px;\n    background-color: purple;\n    border-radius: 50%;\n    top: 45px;\n    right: 123px;\n    animation: ${upAndDown} 3s infinite 1s;\n  }\n\n  & > span {\n    z-index: 0;\n    position: absolute;\n    display: inline-block;\n    height: 50px;\n    top: 40px;\n    left: 249px;\n    right: 123px;\n    background-color: white;\n  }\n`;\n\nexport default Heading;\n","import React, { Component } from 'react';\nimport { Drop, Tube as DRTube } from 'components/styled';\n\nclass Tube extends Component {\n  render() {\n    const { drops, isClicked, indexInNewArray } = this.props;\n\n    return (\n      <DRTube>\n        {drops.map((drop, index) => (\n          <Drop\n            key={index}\n            color={drop}\n            index={4 - index}\n            isDropClicked={index === drops.length - 1 && isClicked}\n            indexInNewArray={4 - indexInNewArray}\n          />\n        ))}\n      </DRTube>\n    );\n  }\n}\nexport default Tube;\n","import React, { Component } from 'react';\nimport { Heading as DRHeading } from 'components/styled';\n\nclass Heading extends Component {\n  render() {\n    return (\n      <DRHeading>\n        Drippit\n        <span />\n      </DRHeading>\n    );\n  }\n}\nexport default Heading;\n","const colors = ['#DC493A', '#4392F1', '#FFA500', '#228B22'];\nexport default colors;\n","import shuffle from 'shuffle-array';\nimport colors from 'constants/colors';\n\nconst initTubes = (numberOfFilledTubes = 4, numberOfEmptyTubes = 2) => {\n  const numberOfTubes = numberOfFilledTubes + numberOfEmptyTubes;\n  const randomColors = shuffle(colors).slice(0, numberOfFilledTubes);\n  let sameColorTubes = [];\n  let tubes = [];\n\n  for (let i = numberOfFilledTubes; i > 0; i--)\n    sameColorTubes = sameColorTubes.concat(\n      new Array(4).fill(randomColors[i - 1])\n    );\n\n  sameColorTubes = shuffle(sameColorTubes);\n\n  for (let i = 0; i < numberOfTubes; i++)\n    tubes.push(sameColorTubes.splice(0, 4));\n\n  return tubes;\n};\n\nexport default initTubes;\n","const didPlayerWin = (tubes) => {\n  let counter = 0;\n  tubes.forEach(\n    (tube) => tube.every((e) => e === tube[0]) && tube.length === 4 && counter++\n  );\n  return counter === 4;\n};\n\nexport default didPlayerWin;\n","import React, { Component } from 'react';\nimport { Flex } from 'components/styled';\nimport { Tube, Heading } from 'components/common';\nimport { initTubes, didPlayerWin } from 'utils';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tubes: [],\n      numberOfTubes: 4,\n      isTubeClicked: null,\n      indexInNewArray: null,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      tubes: initTubes(this.state.numberOfTubes),\n      isTubeClicked: new Array(this.state.numberOfTubes).fill(false),\n    });\n  }\n\n  toggleIsTubeClicked = (index) => {\n    const { isTubeClicked } = this.state;\n    isTubeClicked[index] = !isTubeClicked[index];\n  };\n\n  reset = () => {\n    setTimeout(() => {\n      this.setState({ tubes: initTubes(this.state.numberOfTubes) });\n    }, 500);\n  };\n\n  onTubeClick = (tubeIndex) => {\n    let { isTubeClicked, tubes } = this.state;\n    let indexOfPreviousClicked = isTubeClicked.indexOf(true);\n\n    const clickedTube = tubes[tubeIndex];\n    const lastDrop = clickedTube[clickedTube.length - 1];\n    const previousTube = tubes[indexOfPreviousClicked];\n\n    const isAnyTubeClicked = indexOfPreviousClicked !== -1;\n    const isTheSameTubeClicked = tubeIndex === indexOfPreviousClicked;\n    const isTubeFull = clickedTube.length === 4;\n    const isClickedTubeEmpty = lastDrop === undefined;\n    const doTheColorsMatch = isAnyTubeClicked\n      ? lastDrop === previousTube[previousTube.length - 1]\n      : false;\n\n    if (\n      isAnyTubeClicked &&\n      !isTheSameTubeClicked &&\n      !isTubeFull &&\n      (isClickedTubeEmpty || doTheColorsMatch)\n    ) {\n      clickedTube.push(previousTube.pop());\n      if (didPlayerWin(tubes)) this.reset();\n    } else this.toggleIsTubeClicked(tubeIndex);\n\n    if (isAnyTubeClicked && !isTheSameTubeClicked)\n      this.toggleIsTubeClicked(indexOfPreviousClicked);\n\n    this.setState({ indexInNewArray: clickedTube.length });\n    this.setState({ isTubeClicked });\n  };\n\n  render() {\n    const { tubes, isTubeClicked, indexInNewArray } = this.state;\n\n    if (!isTubeClicked) return null;\n\n    return (\n      <Flex direction='column'>\n        <Heading />\n        <Flex>\n          {tubes.map((tube, index) => (\n            <span key={index} onClick={() => this.onTubeClick(index)}>\n              <Tube\n                drops={tube}\n                isClicked={isTubeClicked[index]}\n                indexInNewArray={indexInNewArray}\n              />\n            </span>\n          ))}\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default Game;\n","import GlobalStyles from 'index.styled';\nimport React from 'react';\nimport Game from 'screens';\n\nconst App = () => {\n  return (\n    <>\n      <GlobalStyles />\n      <Game />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}